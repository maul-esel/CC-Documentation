<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta name="generator" content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org">
    <title>
      Concepts
    </title>
    <meta http-equiv="Content-Script-Type" content="text/javascript">
    <meta http-equiv="Content-Style-Type" content="text/css">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="stylesheet" type="text/css" href="../css/styles_standard.css">
  </head>
  <body>
    <div id="topictop">
      ï¿½
    </div>
    <div id="topictitleleft">
      <div id="topictitle">
        <h3>
          Concepts
        </h3>
      </div>
    </div>
    <div id="main">
      <img src="../img/logo.png" width="150" style="float:left; margin-right:12px; margin-bottom:24px;" alt="logo">
      <p>
        This page discusses the concepts CC is based on. Reading them will help you to understand what CC is actually doing. It is also required that any plugin or co-developer has read and understood these concepts.
      </p>
      <p class="big">
        The Resources Concept
      </p>
      <p>
        Resources are the main data source for <b>ChameleonCoder</b>. Each resource is related to your coding and allows you to manage it in a special way. There are 7 included types of resources, and any plugin can add more.
      </p>
      <p>
        Each resource has some pre-defined properties, such as "name", "description", "notes" and so on. These can be extended by a resource type.<br>
        Additionally, users can define custom key-value pairs for resources, so-called "metadata".
      </p>
      <p>
        Resources can be attached on other resources, for example a file can be attached to a project.
      </p>
      <p>
        You can reference another resource by creating a "reference".
        This is much better than copying it around, as it uses less space, and it automatically ets updates to the original resource.
      </p>
      <p>
        A resource can also be compilable, "executable", editable or related to a special coding language.
      </p>
      <p>
        More information for developers can be found in the <a href="Developers.htm">Developing section</a>.
      </p><br>
      <p class="big">
        The Language Modules Concept
      </p>
      <p>
        <b>ChameleonCoder</b> itself is coding-language independant. It allows you to manage all your resources as described above. But in any IDE or programming environment, you need to perform tasks specific to a special coding language sometimes.<br>
        These actions, such as execution, compilation, syntax highlighting, intellisense and a lot more are done by <u>Language Modules</u> in CC. They are in fact the most important parts of CC!
      </p>
      <p>
        Language Modules can communicate with CC, they can perform a rich set of actions.
      </p>
      <p>
        For more information on how to find and to install these modules, see the extensibility page.
      </p><br>
      <p class="big">
        The <a>RichContent</a> Concept
      </p>
      <p>
        RichContent is a way to describe what a resource is or what it contains.<br />
        The most common use is to describe what a source code file or a library contains:
        all classes, functions, methods, variables, prototypes or whatever can be listed like so.
      </p>
      <p>
        But what is this for? Well, you can do a ton of things with it. CC will support auto-generated documentation from RichContent for example.
        Services or other plugins could look through it and optimize their actions.
        Users will maybe understand your libs better, but it is also  reference for you: forget about "what the hell is in that dll file? Where did I define this constant?", just read it up!
      </p>
    </div>
    <div id="foot">
    ChameleonCoder - 2011
  </div>
  </body>
</html>
